apiVersion: apps/v1
kind: Deployment
metadata:
  name: fss
  labels:
    app: fss
    k8s.kuboard.cn/layer: cloud
spec:
  replicas: 1
  revisionHistoryLimit: 1
  minReadySeconds: 10     # 这里需要估一个比较合理的值，从容器启动到应用正常提供服务
  strategy: # k8s 默认的 strategy 就是 RollingUpdate， 这里写明出来可以调节细节参数
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1         # 更新时允许最大激增的容器数，默认 replicas 的 1/4 向上取整
      maxUnavailable: 0   # 更新时允许最大 unavailable 容器数，默认 replicas 的 1/4 向下取整
  selector:
    matchLabels:
      app: fss
  template:
    metadata:
      name: fss
      labels:
        app: fss
    spec:
      nodeSelector: #节点筛选器
        rt: middleware
      containers:
        - name: fss
          image: farseernet/fss:latest
          imagePullPolicy: IfNotPresent
          imagePullSecrets:
            - name: regsecret
          ports:
            - containerPort: 80
          envFrom: #以密文的方式，把配置项写到env
            - secretRef:
                name: fss
          env:
            - name: TZ
              value: Asia/Shanghai
#          volumeMounts:
#            - name: appsettings
#              mountPath: /app/appsettings.json   #挂载点不存在,Pod会自动创建.
#              readOnly: true                    #不能让容器修改配置的内容。
#              subPath: appsettings.json
#      volumes:
#        -  name: appsettings
#           configMap:
#             defaultMode: 420
#             name: fss
---
apiVersion: v1
data:
  Database__Items__0__Catalog: ''
  Database__Items__0__DataType: ''
  Database__Items__0__PassWord: ''
  Database__Items__0__Port: ''
  Database__Items__0__Server: ''
  Database__Items__0__UserID: ''
  Logging__LogLevel__Default: ''
  Redis__0__Password: ''
  Redis__0__Server: ''
  ElasticSearch__Server: aHR0cDovL2Vz
kind: Secret
metadata:
  name: fss
  namespace: default
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: fss
spec:
  selector:
    app: fss
  type: ClusterIP
  ports:
    - name: http # 请为所有端口指定名称
      port: 80 # 暴露在集群内的服务端口
      protocol: TCP
      targetPort: 80
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: fss
  annotations:
spec:
  rules:
    - host: fss.abtest.ws # 内网则可以直接使用Service
      http:
        paths:
          - path: /
            backend:
              serviceName: fss
              servicePort: 80